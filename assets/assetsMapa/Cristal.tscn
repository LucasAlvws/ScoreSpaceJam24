[gd_scene load_steps=4 format=2]

[ext_resource path="res://assets/assetsMapa/cristal.png" type="Texture" id=1]

[sub_resource type="Shader" id=22]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=23]
shader = SubResource( 22 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/width = 2.0
shader_param/pattern = 0
shader_param/inside = true
shader_param/add_margins = true

[node name="StaticBody2D3" type="StaticBody2D"]
position = Vector2( -5945, -8262 )
rotation = 0.165725
scale = Vector2( 9, 9 )

[node name="Cristal" type="Sprite" parent="."]
modulate = Color( 4, 4, 4, 1 )
material = SubResource( 23 )
position = Vector2( 1175.18, 707.042 )
rotation = 0.980484
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 1 )
offset = Vector2( 27.4474, 8.43962 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
polygon = PoolVector2Array( 1118.86, 692.242, 1120.52, 632.144, 1179.68, 651.089, 1234.66, 733.257, 1229.58, 795.165, 1173.63, 773.88 )
